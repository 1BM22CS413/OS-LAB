Skip to content
1BM22CS412
/
OPERATING-SYSTEM

Type / to search

Code
Issues
Pull requests
Actions
Projects
Security
Insights
Pane width
Use a value between 13% and 50%

17
Change width
Code
Go to file
t
DINING PHILOSOPHER.c
EDF.c
FCFS,SJF,SRTF.C
MULTI-LEVEL.c
PRIORITY.c
PRODUCER CONSUMER.c
RATE-MONOTONIC-SCHEDULING.c
README.md
ROUNDROBIN.c
Documentation • Share feedback
BreadcrumbsOPERATING-SYSTEM
/DINING PHILOSOPHER.c
Latest commit
1BM22CS412
1BM22CS412
Add files via upload
5d04df1
 · 
4 days ago
History
File metadata and controls

Code

Blame
118 lines (68 loc) · 1.76 KB
#include <pthread.h>
#include <semaphore.h>
#include <stdio.h>

#define N 5
#define THINKING 2
#define HUNGRY 1
#define EATING 0
#define LEFT (phnum + 4) % N
#define RIGHT (phnum + 1) % N

int state[N];
int phil[N] = { 0, 1, 2, 3, 4 };

sem_t mutex;
sem_t S[N];

void test(int phnum)
{
    if (state[phnum] == HUNGRY
        && state[LEFT] != EATING
        && state[RIGHT] != EATING) {

        state[phnum] = EATING;



        printf("Philosopher %d takes fork %d and %d\n",
                      phnum + 1, LEFT + 1, phnum + 1);

        printf("Philosopher %d is Eating\n", phnum + 1);

        sem_post(&S[phnum]);
    }
}


void take_fork(int phnum)
{

    sem_wait(&mutex);


    state[phnum] = HUNGRY;

    printf("Philosopher %d is Hungry\n", phnum + 1);

    
    test(phnum);

    sem_post(&mutex);

    
    sem_wait(&S[phnum]);


}


void put_fork(int phnum)
{

    sem_wait(&mutex);

   
    state[phnum] = THINKING;

    printf("Philosopher %d putting fork %d and %d down\n",
           phnum + 1, LEFT + 1, phnum + 1);
    printf("Philosopher %d is thinking\n", phnum + 1);

    test(LEFT);
    test(RIGHT);

    sem_post(&mutex);
}

void* philosopher(void* num)
{

    while (1) {

        int* i = num;



        take_fork(*i);


        put_fork(*i);
    }
}

int main()
{

    int i;
    pthread_t thread_id[N];

   
    sem_init(&mutex, 0, 1);

    for (i = 0; i < N; i++)

        sem_init(&S[i], 0, 0);

    for (i = 0; i < N; i++) {

        pthread_create(&thread_id[i], NULL,
                       philosopher, &phil[i]);

        printf("Philosopher %d is thinking\n", i + 1);
    }

    for (i = 0; i < N; i++)

        pthread_join(thread_id[i], NULL);
}
OPERATING-SYSTEM/DINING PHILOSOPHER.c at main · 1BM22CS412/OPERATING-SYSTEMWhile the code is focused, press Alt+F1 for a menu of operations.